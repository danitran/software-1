import random


class Elevator:
    def __init__(self, bottom_floor, top_floor):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.current_floor = bottom_floor

    def go_to_floor(self, target_floor):
        if target_floor < self.bottom_floor or target_floor > self.top_floor:
            print(f"Target floor {target_floor} is out of bounds.")
            return

        while self.current_floor != target_floor:
            if target_floor > self.current_floor:
                self.floor_up()
            else:
                self.floor_down()

    def floor_up(self):
        if self.current_floor < self.top_floor:
            self.current_floor += 1
            print(f"Going up: Now at floor {self.current_floor}")

    def floor_down(self):
        if self.current_floor > self.bottom_floor:
            self.current_floor -= 1
            print(f"Going down: Now at floor {self.current_floor}")


class Building:
    def __init__(self, bottom_floor, top_floor, number_of_elevators):
        self.bottom_floor = bottom_floor
        self.top_floor = top_floor
        self.elevators = [Elevator(bottom_floor, top_floor) for _ in range(number_of_elevators)]

    def run_elevator(self, elevator_number, destination_floor):
        if elevator_number < 0 or elevator_number >= len(self.elevators):
            print("Invalid elevator number.")
            return
        self.elevators[elevator_number].go_to_floor(destination_floor)

    def fire_alarm(self):
        print("Fire alarm! All elevators are going to the bottom floor.")
        for elevator in self.elevators:
            elevator.go_to_floor(self.bottom_floor)


class Car:
    def __init__(self, registration_number, max_speed):
        self.registration_number = registration_number
        self.max_speed = max_speed
        self.current_speed = 0
        self.travelled_distance = 0

    def accelerate(self, change):
        new_speed = self.current_speed + change
        if new_speed > self.max_speed:
            self.current_speed = self.max_speed
        elif new_speed < 0:
            self.current_speed = 0
        else:
            self.current_speed = new_speed

    def drive(self, hours):
        self.travelled_distance += self.current_speed * hours


class Race:
    def __init__(self, name, distance, cars):
        self.name = name
        self.distance = distance
        self.cars = cars

    def hour_passes(self):
        for car in self.cars:
            speed_change = random.randint(-10, 15)
            car.accelerate(speed_change)
            car.drive(1)

    def print_status(self):
        print(f"\nRace Status for '{self.name}':")
        print(f"{'Registration':<12} {'Max Speed':<10} {'Current Speed':<12} {'Distance':<10}")
        print("-" * 44)
        for car in self.cars:
            print(
                f"{car.registration_number:<12} {car.max_speed:<10} {car.current_speed:<12} {car.travelled_distance:<10}")

    def race_finished(self):
        return any(car.travelled_distance >= self.distance for car in self.cars)


def main():
    # Elevator and Building simulation
    print("Elevator and Building Simulation")
    building = Building(0, 10, 3)  # Building with floors 0 to 10 and 3 elevators
    building.run_elevator(0, 5)  # Run elevator 0 to floor 5
    building.run_elevator(1, 2)  # Run elevator 1 to floor 2
    building.run_elevator(2, 10)  # Run elevator 2 to top floor
    building.fire_alarm()  # Trigger fire alarm

    #Race simulation
    print("\nRace Simulation")
    cars = [Car(f"ABC-{i + 1}", random.randint(100, 200)) for i in range(10)]
    race = Race("Grand Demolition Derby", 8000, cars)

    hours_passed = 0
    while not race.race_finished():
        race.hour_passes()
        hours_passed += 1
        if hours_passed % 10 == 0:
            race.print_status()

    # Final status
    race.print_status()
    print(f"\nThe race is finished after {hours_passed} hours!")


if __name__ == "__main__":
    main()
